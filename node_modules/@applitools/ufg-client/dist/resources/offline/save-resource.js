"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeSaveResource = void 0;
const utils = __importStar(require("@applitools/utils"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
function makeSaveResource({ logger: mainLogger, offlineResourcesLocationPath, batchingTimeout = 300, }) {
    const savedResources = new Set();
    const requestedResources = new Map();
    const saveResourcesWithBatching = utils.general.batchify(saveResources, { timeout: batchingTimeout });
    return async function saveResource({ resource, logger = mainLogger }) {
        logger = logger.extend(mainLogger, { tags: [`save-resource-${utils.general.shortid()}`] });
        const hash = resource.hash.hash; // + '_' + apiKey
        if (savedResources.has(hash)) {
            return Promise.resolve();
        }
        else if (requestedResources.has(hash)) {
            return requestedResources.get(hash);
        }
        else {
            if ('getter' in resource) {
                // resource getter isn't supported (yet) in offline executions. However, let's handle it here just in case and for type safety.
                resource = await resource.getter();
            }
            const promise = saveResourcesWithBatching({ resource, logger })
                .then(result => {
                savedResources.add(hash);
                return result;
            })
                .finally(() => {
                requestedResources.delete(hash);
            });
            requestedResources.set(hash, promise);
            return promise;
        }
    };
    async function saveResources(batch) {
        try {
            batch.forEach(([options, { resolve, reject }]) => {
                saveResourceToFile(options).then(resolve, reject);
            });
        }
        catch (err) {
            batch.forEach(([, { reject }]) => reject(err));
        }
    }
    async function saveResourceToFile({ resource, logger }) {
        try {
            const filePath = path.resolve(offlineResourcesLocationPath, resource.hash.hash);
            await fs.promises.writeFile(filePath, resource.value);
            logger.log(`Resource ${resource.id} saved successfully to ${filePath}`);
        }
        catch (error) {
            logger.error('Error saving resource:', error);
        }
    }
}
exports.makeSaveResource = makeSaveResource;
