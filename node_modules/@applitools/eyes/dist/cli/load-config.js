"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfig = void 0;
/* eslint no-console: off */
const utils = __importStar(require("@applitools/utils"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
async function loadConfig(configPath) {
    const configPathArr = configPath ? [configPath] : [];
    const paths = configPathArr.concat(['applitools.config.js']);
    let config = {};
    try {
        config = utils.config.getConfig({
            paths,
            traverse: false,
            strict: true,
        });
        // @ts-ignore
        if (config.__esModule) {
            // @ts-ignore
            config = config.default;
        }
    }
    catch (err) {
        if (err.code === 'ERR_REQUIRE_ESM') {
            const resolvedPaths = paths.map(probablePath => path_1.default.resolve(process.cwd(), probablePath));
            const foundPath = resolvedPaths.find(resolvedPath => fs_1.default.existsSync(resolvedPath));
            if (foundPath) {
                try {
                    config = await import(foundPath);
                }
                catch (err) {
                    console.warn(chalk_1.default.yellow(err.message));
                }
            }
            else {
                console.warn(chalk_1.default.yellow('Could not find configuration file.'));
            }
        }
        else if (configPath) {
            console.warn(chalk_1.default.yellow(`${err.message}. configPath: ${path_1.default.resolve(process.cwd(), configPath)}`));
        }
    }
    return config;
}
exports.loadConfig = loadConfig;
