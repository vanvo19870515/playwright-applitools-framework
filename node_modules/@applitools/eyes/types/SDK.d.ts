import { makeCore as makeDefaultCore, type Core, type SpecType, type SpecDriver } from '@applitools/core';
export interface SDK<TSpec extends SpecType = SpecType> {
    spec?: SpecDriver<TSpec>;
    agentId?: string;
    environment?: Record<string, any>;
    maskLog?: boolean;
    offlineLocationPath?: string;
    makeCore?: typeof makeDefaultCore;
}
export declare function initSDK<TSpec extends SpecType = SpecType>(options?: SDK<TSpec>, maskLog?: boolean): {
    core: Core<TSpec, 'classic' | 'ufg'>;
    spec?: SpecDriver<TSpec>;
};
export declare const getCoreWithCache: typeof getCore & {
    getCachedValues(): Core<SpecType, "classic" | "ufg">[];
    setCachedValue(key: any, value: Core<SpecType, "classic" | "ufg">): void;
    clearCache(): void;
};
declare function getCore<TSpec extends SpecType = SpecType>({ makeCore, ...options }?: SDK<TSpec>): Core<TSpec, 'classic' | 'ufg'>;
export {};
