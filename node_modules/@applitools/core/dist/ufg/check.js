"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCheck = void 0;
const driver_1 = require("@applitools/driver");
const uniquify_environments_1 = require("../automation/utils/uniquify-environments");
const to_environment_key_1 = require("../automation/utils/to-environment-key");
const abort_error_1 = require("../errors/abort-error");
const utils = __importStar(require("@applitools/utils"));
const lang = __importStar(require("../lang"));
const chalk_1 = __importDefault(require("chalk"));
const take_snapshots_1 = require("./take-snapshots");
const create_render_target_from_snapshot_1 = require("./create-render-target-from-snapshot");
const to_base_check_settings_1 = require("../automation/utils/to-base-check-settings");
function makeCheck({ eyes, target: defaultTarget, environments: defaultEnvironments = [], spec, signal, logger: mainLogger, }) {
    return async function check({ target = defaultTarget, settings = {}, logger = mainLogger, } = {}) {
        var _a;
        logger = logger.extend(mainLogger);
        logger.log('Command "check" is called with settings', settings);
        if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
            logger.warn('Command "check" was called after test was already aborted');
            throw new abort_error_1.AbortError('Command "check" was called after test was already aborted');
        }
        const uniqueEnvironments = (0, uniquify_environments_1.uniquifyEnvironments)((_a = settings.environments) !== null && _a !== void 0 ? _a : defaultEnvironments);
        const ufgClient = await eyes.core.getUFGClient({
            settings: {
                ...eyes.test.ufgServer,
                eyesServerUrl: eyes.test.eyesServer.eyesServerUrl,
                apiKey: eyes.test.eyesServer.apiKey,
            },
            logger,
        });
        let snapshots;
        let driver;
        if (spec && (0, driver_1.isDriver)(target, spec)) {
            const takeSnapshots = (0, take_snapshots_1.makeTakeSnapshots)({ core: eyes.core, spec, signal, logger });
            driver = await (0, driver_1.makeDriver)({ spec, driver: target, logger });
            snapshots = await takeSnapshots({
                driver,
                account: eyes.test.account,
                settings: { ...settings, environments: uniqueEnvironments },
                logger,
            });
        }
        else {
            // TODO (amit)
            snapshots = !utils.types.isArray(target) ? Array(uniqueEnvironments.length).fill(target) : target;
        }
        const promises = snapshots.map(async (snapshot, i) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            const environmentLogger = logger.extend({ tags: [`environment-${utils.general.shortid()}`] });
            const { target } = snapshot;
            const environment = uniqueEnvironments[i];
            if (utils.types.has(environment, 'name') && environment.name === 'edge') {
                environmentLogger.console.log(chalk_1.default.yellow(lang.edgeUfgEnvironmentDeprecatedWarning));
            }
            try {
                if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                    environmentLogger.warn('Command "check" was aborted before rendering');
                    throw new abort_error_1.AbortError('Command "check" was aborted before rendering');
                }
                if (utils.types.has(environment, 'iosDeviceInfo') || utils.types.has(environment, 'androidDeviceInfo')) {
                    environment.type = utils.types.has(target, 'cdt') ? 'web' : 'native';
                }
                const renderTargetPromise = (0, create_render_target_from_snapshot_1.createRenderTargetFromSnapshot)({
                    ufgClient,
                    snapshot,
                    logger: environmentLogger,
                    urlWithCredentials: snapshot.url,
                });
                const baseEyes = await eyes.getBaseEyes({ settings: { environment, driver }, logger: environmentLogger });
                try {
                    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                        environmentLogger.warn('Command "check" was aborted before rendering');
                        throw new abort_error_1.AbortError('Command "check" was aborted before rendering');
                    }
                    else if (!baseEyes.running) {
                        environmentLogger.warn(`Render on environment with id "${(_a = baseEyes.test.environment) === null || _a === void 0 ? void 0 : _a.environmentId}" was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Render on environment with id "${(_b = baseEyes.test.environment) === null || _b === void 0 ? void 0 : _b.environmentId}" was aborted during one of the previous steps`);
                    }
                    const renderTarget = await renderTargetPromise;
                    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                        environmentLogger.warn('Command "check" was aborted before rendering');
                        throw new abort_error_1.AbortError('Command "check" was aborted before rendering');
                    }
                    else if (!baseEyes.running) {
                        environmentLogger.warn(`Render on environment with id "${(_c = baseEyes.test.environment) === null || _c === void 0 ? void 0 : _c.environmentId}" was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Render on environment with id "${(_d = baseEyes.test.environment) === null || _d === void 0 ? void 0 : _d.environmentId}" was aborted during one of the previous steps`);
                    }
                    const { elementReferences: selectors, getBaseCheckSettings } = (0, to_base_check_settings_1.toBaseCheckSettings)({
                        settings: snapshot.settings,
                    });
                    const { renderId, selectorRegions, ...baseTarget } = await ufgClient.render({
                        target: renderTarget,
                        settings: {
                            ...snapshot.settings,
                            region: (_e = selectors.target) !== null && _e !== void 0 ? _e : snapshot.settings.region,
                            scrollRootElement: selectors.scrolling,
                            selectorsToCalculate: selectors.calculate,
                            includeFullPageSize: Boolean(snapshot.settings.pageId),
                            environment: { ...environment, environmentId: baseEyes.test.environment.environmentId },
                            uploadUrl: baseEyes.test.uploadUrl,
                            stitchingServiceUrl: baseEyes.test.stitchingServiceUrl,
                        },
                        signal,
                        logger: environmentLogger,
                    });
                    const baseSettings = getBaseCheckSettings({
                        calculatedRegions: selectors.calculate.map((_, index) => {
                            var _a;
                            return ({
                                regions: (_a = selectorRegions === null || selectorRegions === void 0 ? void 0 : selectorRegions[index]) !== null && _a !== void 0 ? _a : [],
                            });
                        }),
                    });
                    baseSettings.renderId = renderId;
                    baseTarget.source = snapshot.url;
                    baseTarget.name = snapshot.title;
                    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                        environmentLogger.warn('Command "check" was aborted after rendering');
                        throw new abort_error_1.AbortError('Command "check" was aborted after rendering');
                    }
                    else if (!baseEyes.running) {
                        environmentLogger.warn(`Render on environment with id "${(_f = baseEyes.test.environment) === null || _f === void 0 ? void 0 : _f.environmentId}" was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Render on environment with id "${(_g = baseEyes.test.environment) === null || _g === void 0 ? void 0 : _g.environmentId}" was aborted during one of the previous steps`);
                    }
                    if (settings.assumesMutability) {
                        void eyes.core.logEvent({
                            settings: {
                                level: 'Notice',
                                event: {
                                    type: 'eyes.check',
                                    message: 'Assuming mutability for check Target',
                                    test: {
                                        checkName: settings.name,
                                        batchId: baseEyes.test.batchId,
                                        sessionId: baseEyes.test.sessionId,
                                        testName: baseEyes.test.testName,
                                        testId: baseEyes.test.testId,
                                        userTestId: baseEyes.test.userTestId,
                                        appId: baseEyes.test.appId,
                                        baselineId: baseEyes.test.baselineId,
                                        environmentId: (_h = baseEyes.test.environment) === null || _h === void 0 ? void 0 : _h.environmentId,
                                    },
                                    isNew: baseEyes.test.isNew,
                                    resultsUrl: baseEyes.test.resultsUrl,
                                },
                                ...eyes.test.eyesServer,
                            },
                        });
                    }
                    try {
                        logInvalidSettings(logger, settings);
                    }
                    catch (err) {
                        logger.log('Failed to log invalid check settings', err);
                    }
                    await baseEyes.check({
                        target: { ...baseTarget, isTransformed: true },
                        settings: baseSettings,
                        logger: environmentLogger,
                    });
                }
                catch (error) {
                    environmentLogger.error(`Render on environment with id "${(_j = baseEyes.test.environment) === null || _j === void 0 ? void 0 : _j.environmentId}" failed due to an error`, error);
                    if (baseEyes.running && !(signal === null || signal === void 0 ? void 0 : signal.aborted))
                        await baseEyes.abort({ logger: environmentLogger, settings: { reason: error } });
                }
            }
            catch (error) {
                environmentLogger.error(`Environment with id ${environment.environmentId} failed before rendering started due to an error`, error);
                error.info = { ...error.info, userTestId: eyes.test.userTestId, environment };
                throw error;
            }
        });
        uniqueEnvironments.forEach((environment, index) => {
            const key = (0, to_environment_key_1.toEnvironmentKey)(environment);
            let item = eyes.storage.get(key);
            if (!item) {
                item = { eyes: utils.promises.makeControlledPromise(), jobs: [] };
                eyes.storage.set(key, item);
            }
            item.jobs.push(promises[index]);
        });
    };
}
exports.makeCheck = makeCheck;
function logInvalidSettings(logger, settings) {
    const invalidKeys = ['overlap', 'scrollRootElement', 'stitchMode'];
    if (!settings)
        return;
    const invalidEntries = Object.entries(settings)
        .filter(([key]) => invalidKeys.includes(key))
        .filter(([_, value]) => value !== undefined);
    if (invalidEntries.length > 0) {
        logger.warn('Warning - Invalid keys in check settings (will be ignored):', { settings, invalidEntries });
    }
}
