"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeUploadResource = void 0;
const logger_1 = require("@applitools/logger");
const throat_1 = __importDefault(require("throat"));
const utils = __importStar(require("@applitools/utils"));
function makeUploadResource({ requests, batchingTimeout = 300, concurrency = 100, logger: mainLogger, apiKey, }) {
    const uploadResourceReq = (0, throat_1.default)(concurrency, requests.uploadResource);
    const isResourceExist = (0, throat_1.default)(concurrency, utils.general.batchify(checkResources, { timeout: batchingTimeout }));
    const uploadResource = async function ({ resource, logger = mainLogger }) {
        logger = logger.extend(mainLogger, { tags: [`upload-resource-${utils.general.shortid()}`] });
        if (!(await isResourceExist({ hash: resource.hash, logger }))) {
            if ('getter' in resource) {
                resource = await resource.getter();
            }
            await uploadResourceReq({ resource, logger });
        }
    };
    return utils.general.cachify(uploadResource, ([{ resource }]) => `${JSON.stringify(resource.hash)}_${apiKey}`);
    async function checkResources(batch) {
        const logger = (0, logger_1.mergeLoggers)(...batch.map(([{ logger }]) => logger));
        try {
            const response = await requests.checkResources({
                resources: batch.map(([hash]) => hash),
                logger,
            });
            const resolvers = batch.map(([, { resolve }]) => resolve);
            for (const [exists, resolve] of utils.general.zip(response, resolvers)) {
                resolve(exists);
            }
        }
        catch (err) {
            batch.forEach(([, { reject }]) => reject(err));
        }
    }
}
exports.makeUploadResource = makeUploadResource;
