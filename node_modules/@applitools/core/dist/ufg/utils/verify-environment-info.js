"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyEnvironmentsInfo = void 0;
const utils = __importStar(require("@applitools/utils"));
const ufg_client_1 = require("@applitools/ufg-client");
async function verifyEnvironmentsInfo({ environments, ufgClient, }) {
    const invalid = [];
    await Promise.all(environments.map(async (environment) => {
        if (utils.types.has(environment, ['width', 'height'])) {
            const browserName = environment.name || '';
            if (!getAllBrowserNames().includes(browserName)) {
                invalid.push(browserName);
            }
        }
        else if (utils.types.has(environment, 'chromeEmulationInfo')) {
            const devices = await ufgClient.getChromeEmulationDevices();
            const deviceName = environment.chromeEmulationInfo.deviceName;
            if (!devices[deviceName]) {
                invalid.push(deviceName);
            }
        }
        else if (utils.types.has(environment, 'iosDeviceInfo')) {
            const devices = await ufgClient.getIOSDevices();
            const deviceName = environment.iosDeviceInfo.deviceName;
            if (!devices[deviceName]) {
                invalid.push(deviceName);
            }
        }
    }));
    if (invalid.length > 0) {
        throw new Error(`The specified UFG environment(s): ${invalid
            .map(item => `"${item}"`)
            .join(', ')} are either invalid or no longer supported. \nRefer to our current list of supported devices and browsers at: https://applitools.com/tutorials/concepts/test-execution/ultrafast-grid-devices-browsers \nIf you continue to experience issues, ensure that your SDK is updated to the latest version.`);
    }
}
exports.verifyEnvironmentsInfo = verifyEnvironmentsInfo;
function getAllBrowserNames() {
    /*
    Some of the browser names are not part of the enum because they are not user facing. We support them for backward compatibility.
    do not add them to the enum.
    */
    return [
        ...Object.values(ufg_client_1.BrowserNameEnum),
        'chrome-1',
        'firefox-1',
        'edgechromium-1',
        'safari-1',
        'chrome-2',
        'firefox-2',
        'edgechromium-2',
        'safari-2',
        'chrome-canary',
        'firefox-canary',
        'edgechromium-canary',
        'safari-canary',
        'chrome-one-versions-back',
        'firefox-one-versions-back',
        'edgechromium-one-versions-back',
        'safari-one-versions-back',
        'chrome-two-version-back',
        'firefox-two-version-back',
        'edgechromium-two-version-back',
        'safari-two-version-back',
        'ie11',
    ];
}
