"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBatchName = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const utils = __importStar(require("@applitools/utils"));
const path = __importStar(require("path"));
function getBatchName({ appName }) {
    // Function to execute Git command fallback
    function getGitInfo(command) {
        const tmpFilepath = path.join(os.tmpdir(), utils.general.guid());
        try {
            const stream = fs.openSync(tmpFilepath, 'a');
            (0, child_process_1.execSync)(command, { stdio: ['ignore', stream, stream] });
            return fs.readFileSync(tmpFilepath, 'utf-8').trim();
        }
        catch (error) {
            return null;
        }
        finally {
            if (fs.existsSync(tmpFilepath)) {
                fs.unlinkSync(tmpFilepath);
            }
        }
    }
    const branchName = process.env.BRANCH ||
        process.env.CI_COMMIT_BRANCH ||
        process.env.CI_BRANCH_NAME ||
        process.env.CI_COMMIT_REF_NAME ||
        process.env.CI_BRANCH ||
        process.env.REF_NAME ||
        process.env.BUILD_SOURCEBRANCHNAME || // Azure DevOps
        (process.env.GITHUB_REF ? process.env.GITHUB_REF.replace(/^refs\/heads\//, '') : null) || // GitHub Actions
        process.env.CIRCLE_BRANCH || // CircleCI
        process.env.BITBUCKET_BRANCH || // Bitbucket
        process.env.BUILD_BRANCH || // Jenkins
        getGitInfo('git rev-parse --abbrev-ref HEAD'); // Fallback to Git command
    const commitSHA = process.env.SHA ||
        process.env.GIT_SHA ||
        process.env.CI_COMMIT_SHA ||
        process.env.COMMIT_HASH ||
        process.env.CI_COMMIT_ID ||
        process.env.BUILD_SOURCEVERSION || // Azure DevOps
        process.env.GITHUB_SHA || // GitHub Actions
        process.env.CIRCLE_SHA1 || // CircleCI
        process.env.BITBUCKET_COMMIT || // Bitbucket
        process.env.GIT_COMMIT || // Jenkins
        getGitInfo('git rev-parse HEAD'); // Fallback to Git command
    return [appName, commitSHA, branchName].filter(Boolean).join(' - ');
}
exports.getBatchName = getBatchName;
