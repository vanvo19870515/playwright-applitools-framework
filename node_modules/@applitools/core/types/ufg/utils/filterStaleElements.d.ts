import type { Context, ElementReference, SpecType } from '@applitools/driver';
import { DomSnapshotsSettings } from './take-dom-snapshots';
export declare function isStale<TSpec extends SpecType>({ context, element, }: {
    context: Context<TSpec>;
    element: ElementReference<TSpec>;
}): Promise<boolean>;
export declare function filterStaleElements<TSpec extends SpecType>({ context, elementReferences, }: {
    context: Context<TSpec>;
    elementReferences: ElementReference<TSpec>[] | undefined;
}): Promise<(string | TSpec["element"] | TSpec["secondary"]["element"] | TSpec["selector"] | TSpec["secondary"]["selector"] | {
    selector: string | TSpec["selector"] | TSpec["secondary"]["selector"];
    type?: string | undefined;
    child?: TSpec["selector"] | TSpec["secondary"]["selector"] | import("@applitools/driver").CommonSelector<TSpec["selector"] | TSpec["secondary"]["selector"]> | undefined;
    shadow?: TSpec["selector"] | TSpec["secondary"]["selector"] | import("@applitools/driver").CommonSelector<TSpec["selector"] | TSpec["secondary"]["selector"]> | undefined;
    frame?: TSpec["selector"] | TSpec["secondary"]["selector"] | import("@applitools/driver").CommonSelector<TSpec["selector"] | TSpec["secondary"]["selector"]> | undefined;
    fallback?: TSpec["selector"] | TSpec["secondary"]["selector"] | import("@applitools/driver").CommonSelector<TSpec["selector"] | TSpec["secondary"]["selector"]> | undefined;
})[]>;
export declare function removeStaleElementsFromDomSnapshotsSettings<TSpec extends SpecType>({ context, settings, targetElement, }: {
    context: Context<TSpec>;
    settings: DomSnapshotsSettings<TSpec>;
    targetElement: ElementReference<TSpec>;
}): Promise<DomSnapshotsSettings<TSpec>>;
