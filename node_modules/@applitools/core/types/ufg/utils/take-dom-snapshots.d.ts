import type { DomSnapshot, LazyLoadOptions } from '../types';
import { type Size } from '@applitools/utils';
import { type Logger } from '@applitools/logger';
import { type SpecType, type Driver } from '@applitools/driver';
import { type Environment } from '@applitools/ufg-client';
import { type DomSnapshotSettings } from './take-dom-snapshot';
export * from './take-dom-snapshot';
export type DomSnapshotsSettings<TSpec extends SpecType> = DomSnapshotSettings<TSpec> & {
    environments: Environment[];
    waitBeforeCapture?: number | (() => Promise<void>);
    layoutBreakpoints?: {
        breakpoints: number[] | boolean;
        heightBreakpoints?: boolean;
        reload?: boolean;
    };
    lazyLoad?: boolean | LazyLoadOptions;
};
export declare function takeDomSnapshots<TSpec extends SpecType>({ driver, settings, hooks, provides, logger, }: {
    driver: Driver<TSpec>;
    settings: DomSnapshotsSettings<TSpec>;
    hooks?: {
        beforeEachSnapshot?(): void | Promise<void>;
    };
    provides?: {
        getChromeEmulationDevices(): Promise<Record<string, Record<string, Size>>>;
        getIOSDevices(): Promise<Record<string, Record<string, Size>>>;
    };
    logger: Logger;
}): Promise<DomSnapshot[]>;
