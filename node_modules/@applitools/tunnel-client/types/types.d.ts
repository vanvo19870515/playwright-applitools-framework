export interface PrepareTunnelEnvironmentSettings {
    tunnelServerUrl?: string;
    cacheDir?: string;
}
export interface TunnelClientSettings {
    serviceUrl?: string;
    region?: 'us-west' | 'australia-southeast' | 'singapore';
}
export interface TunnelClientWorkerSettings extends TunnelClientSettings {
    pollingServerUrl: string;
    secret: string;
    agentId: string;
    pollingTimeout?: number;
    timeout?: number;
    envInfo?: Record<string, any>;
    ecHealthCheckInterval?: number;
}
export interface TunnelClient {
    list(): Promise<Tunnel[]>;
    create(credentials: TunnelCredentials): Promise<Tunnel>;
    replace(tunnelId: string): Promise<Tunnel>;
    destroy(tunnelId: string): Promise<void>;
    close(): Promise<void>;
    connectivityTest(region: TunnelClientSettings['region'], timeout: number): Promise<{
        success: boolean;
        error?: string;
        timeTaken?: number;
        errorMessage?: string;
    }>;
}
export interface TunnelCredentials {
    eyesServerUrl: string;
    region?: 'us-west' | 'australia-southeast' | 'singapore';
    apiKey: string;
}
export interface Tunnel {
    tunnelId: string;
    credentials: TunnelCredentials;
}
export interface ECHealthCheckStatus {
    verified_at: number;
    status: 'success' | 'error' | 'unknown';
    error_code?: string;
    error?: {
        message: string;
        reason?: string;
        status?: number;
        body?: string;
        url?: string;
    };
}
