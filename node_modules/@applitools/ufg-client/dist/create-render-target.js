"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCreateRenderTarget = void 0;
const resource_1 = require("./resources/resource");
const resource_dom_1 = require("./resources/resource-dom");
const resource_vhs_1 = require("./resources/resource-vhs");
const utils = __importStar(require("@applitools/utils"));
const buffer_1 = require("buffer");
function getSnapshotOrigin(url) {
    if (!url)
        return url;
    return new URL(url).origin;
}
function replaceResourceUrlIfNeeded(url, replaceResourceUrlsSettings) {
    if (!url || !replaceResourceUrlsSettings)
        return url;
    return url.replace(replaceResourceUrlsSettings.from, replaceResourceUrlsSettings.to);
}
function replaceUrlInContentIfNeeded(obj, replaceResourceUrlsSettings) {
    if (!replaceResourceUrlsSettings)
        return obj;
    return JSON.parse(JSON.stringify(obj).replace(new RegExp(replaceResourceUrlsSettings.from, 'g'), replaceResourceUrlsSettings.to));
}
function makeReplaceUrlInBase64ContentIfNeeded(replaceResourceUrlsSettings) {
    if (!replaceResourceUrlsSettings)
        return undefined;
    return function replaceUrlInBase64ContentIfNeeded(obj) {
        if (obj.toString('utf-8').search(new RegExp(replaceResourceUrlsSettings.from, 'g')) === -1)
            return obj;
        const resourceData = obj
            .toString('utf-8')
            .replace(new RegExp(replaceResourceUrlsSettings.from, 'g'), replaceResourceUrlsSettings.to);
        return buffer_1.Buffer.from(resourceData, 'utf-8');
    };
}
function makeCreateRenderTarget({ processResources, logger: mainLogger, replaceResourceUrl }) {
    return async function createRenderTarget({ snapshot, settings, logger = mainLogger, }) {
        logger = logger.extend(mainLogger, { tags: [`render-target-${utils.general.shortid()}`] });
        const processedSnapshotResources = await processSnapshotResources({ snapshot, settings, logger });
        const resources = await processedSnapshotResources.promise;
        const sortedResources = replaceResourceUrl
            ? Object.entries(resources)
                .sort(([url1], [url2]) => url1.localeCompare(url2))
                .reduce((mapping, [url, resource]) => {
                mapping[url] = resource;
                return mapping;
            }, {})
            : resources;
        if (utils.types.has(snapshot, 'cdt')) {
            const snapshotResource = sortedResources[snapshot.url];
            delete sortedResources[snapshot.url];
            return { snapshot: snapshotResource, resources: sortedResources, source: snapshot.url };
        }
        else {
            const snapshotResource = resources.vhs;
            return utils.types.has(snapshot, 'vhsType')
                ? { snapshot: snapshotResource, resources, vhsType: snapshot.vhsType }
                : { snapshot: snapshotResource, resources, vhsCompatibilityParams: snapshot.vhsCompatibilityParams };
        }
    };
    async function processSnapshotResources({ snapshot, settings, logger, }) {
        var _a, _b, _c;
        const replaceResourceUrlsSettings = replaceResourceUrl
            ? { from: getSnapshotOrigin(snapshot.url), to: replaceResourceUrl }
            : undefined;
        const [snapshotResources, ...frameResources] = await Promise.all([
            processResources({
                resources: Object.fromEntries([
                    ...((_a = snapshot.resourceUrls) !== null && _a !== void 0 ? _a : []).map(url => {
                        return [url, (0, resource_1.makeResource)({ url, environment: settings === null || settings === void 0 ? void 0 : settings.environment })];
                    }),
                    ...Object.entries((_b = snapshot.resourceContents) !== null && _b !== void 0 ? _b : {}).map(([url, resource]) => {
                        url = replaceResourceUrlIfNeeded(url, replaceResourceUrlsSettings);
                        if (utils.types.has(resource, 'url'))
                            resource.url = replaceResourceUrlIfNeeded(resource.url, replaceResourceUrlsSettings);
                        return [
                            url,
                            utils.types.has(resource, 'errorStatusCode')
                                ? (0, resource_1.makeResource)({ id: url, errorStatusCode: resource.errorStatusCode })
                                : (0, resource_1.makeResource)({
                                    url,
                                    value: resource.value,
                                    contentType: resource.type,
                                    dependencies: resource.dependencies,
                                }, makeReplaceUrlInBase64ContentIfNeeded(replaceResourceUrlsSettings)),
                        ];
                    }),
                ]),
                settings: {
                    ...settings,
                    headers: { ...settings === null || settings === void 0 ? void 0 : settings.headers, Referer: utils.types.has(snapshot, 'url') ? snapshot.url : undefined },
                    getUrlForUrlResource: replaceResourceUrlsSettings
                        ? url => replaceResourceUrlIfNeeded(url, replaceResourceUrlsSettings)
                        : undefined,
                },
                logger,
            }),
            ...((_c = snapshot.frames) !== null && _c !== void 0 ? _c : []).map(frameSnapshot => {
                return processSnapshotResources({ snapshot: frameSnapshot, settings, logger });
            }),
        ]);
        const frameDomResourceMapping = frameResources.reduce((mapping, resources, index) => {
            const frameUrl = replaceResourceUrlIfNeeded(snapshot.frames[index].url, replaceResourceUrlsSettings);
            return Object.assign(mapping, { [frameUrl]: resources.mapping[frameUrl] });
        }, {});
        const snapshotResourcesMapping = Object.keys(snapshotResources.mapping).reduce((mapping, resourceUrl) => {
            const url = replaceResourceUrlIfNeeded(resourceUrl, replaceResourceUrlsSettings);
            mapping[url] = snapshotResources.mapping[resourceUrl];
            return mapping;
        }, {});
        const resourceMappingWithoutDom = { ...snapshotResourcesMapping, ...frameDomResourceMapping };
        if (utils.types.has(snapshot, 'url'))
            snapshot.url = replaceResourceUrlIfNeeded(snapshot.url, replaceResourceUrlsSettings);
        const domResource = utils.types.has(snapshot, 'cdt')
            ? {
                [snapshot.url]: (0, resource_dom_1.makeResourceDom)({
                    cdt: replaceUrlInContentIfNeeded(snapshot.cdt, replaceResourceUrlsSettings),
                    resources: resourceMappingWithoutDom,
                }),
            }
            : {
                vhs: (0, resource_vhs_1.makeResourceVhs)({
                    vhsHash: utils.types.has(snapshot, 'vhsHash')
                        ? snapshot.vhsHash /* android */
                        : snapshotResources.mapping.vhs /* ios */,
                    vhsType: utils.types.has(snapshot, 'vhsType') ? snapshot.vhsHash : undefined,
                    platformName: snapshot.platformName,
                    resources: resourceMappingWithoutDom, // this will be empty until resources are supported inside VHS
                }),
            };
        const processedDomResource = await processResources({ resources: domResource, logger });
        const frameResourceMapping = frameResources.reduce((mapping, resources) => {
            return Object.assign(mapping, resources.mapping);
        }, {});
        const resourceMapping = {
            ...frameResourceMapping,
            ...snapshotResources.mapping,
            ...processedDomResource.mapping,
        };
        return {
            mapping: resourceMapping,
            promise: Promise.all([
                snapshotResources.promise,
                processedDomResource.promise,
                ...frameResources.map(resources => resources.promise),
            ]).then(() => resourceMapping),
        };
    }
}
exports.makeCreateRenderTarget = makeCreateRenderTarget;
