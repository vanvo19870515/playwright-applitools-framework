"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeUFGClientOffline = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils = __importStar(require("@applitools/utils"));
const save_resource_1 = require("../resources/offline/save-resource");
const create_render_target_1 = require("../create-render-target");
const process_resources_1 = require("../resources/process-resources");
const fetch_resource_1 = require("../resources/fetch-resource");
const ios_devices_1 = require("../offline/ios-devices");
const chrome_emulation_devices_1 = require("../offline/chrome-emulation-devices");
function makeUFGClientOffline({ cache, settings, logger, }) {
    const offlineLocationPath = settings.offlineLocationPath;
    const offlineResourcesLocationPath = path_1.default.resolve(offlineLocationPath, 'resources');
    try {
        fs_1.default.mkdirSync(offlineResourcesLocationPath);
    }
    catch (err) {
        if (err.code === 'EEXIST') {
            logger.log(`offline resources folder already exists: ${offlineResourcesLocationPath} (continuing...)`);
        }
        else {
            throw err;
        }
    }
    logger.log('offline ufg client created with path', offlineLocationPath);
    const fetchResource = (0, fetch_resource_1.makeFetchResource)({
        concurrency: settings.fetchConcurrency,
        tunnelIds: settings.tunnelIds,
        accessToken: settings.accessToken,
        eyesServerUrl: settings.eyesServerUrl,
        apiKey: settings.apiKey,
        logger,
    });
    const saveResource = (0, save_resource_1.makeSaveResource)({ offlineResourcesLocationPath, logger });
    const processResources = (0, process_resources_1.makeProcessResources)({
        fetchResource,
        cache,
        asyncCache: settings.asyncCache,
        uploadResource: saveResource,
        logger,
    });
    const getActualEnvironment = async ({ settings, logger: _logger }) => ({
        requested: settings.environment,
        environmentId: utils.general.guid(),
        rawEnvironment: { isRawEnvironment: true },
    });
    const render = async ({ target, settings, logger: renderLogger = logger }) => {
        renderLogger = renderLogger.extend({ tags: [`render-offline-${utils.general.shortid()}`] });
        const renderId = utils.general.guid();
        const renderPath = path_1.default.resolve(offlineLocationPath, `${renderId}.json`);
        await fs_1.default.promises.writeFile(renderPath, JSON.stringify({ target, settings }, null, 2));
        renderLogger.log('render written to file at renderPath', renderPath);
        return {
            renderId: renderPath,
            status: 'rendered',
            image: '',
        };
    };
    const getChromeEmulationDevices = async () => chrome_emulation_devices_1.chromeEmulationDevices;
    const getAndroidDevices = async () => ({});
    const getIOSDevices = async () => ios_devices_1.iosDevices;
    return {
        createRenderTarget: (0, create_render_target_1.makeCreateRenderTarget)({ processResources, logger, replaceResourceUrl: 'http://offline' }),
        render,
        startRenders: async () => {
            throw new Error('not implemented - this code should not be reached');
        },
        getRenderResults: async () => {
            throw new Error('not implemented - this code should not be reached');
        },
        getActualEnvironment,
        getChromeEmulationDevices,
        getAndroidDevices,
        getIOSDevices,
        uploadResource: (async () => {
            throw new Error('not implemented - this code should not be reached');
        }),
        getCachedResourceUrls: () => (cache ? Array.from(cache.keys()) : []),
    };
}
exports.makeUFGClientOffline = makeUFGClientOffline;
