"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTunnelClient = void 0;
const logger_1 = require("@applitools/logger");
const req_1 = require("@applitools/req");
//@ts-ignore
const execution_grid_tunnel_1 = require("@applitools/execution-grid-tunnel");
const abort_controller_1 = require("abort-controller");
const utils = __importStar(require("@applitools/utils"));
const req_logs_1 = require("./req-logs");
const worker_1 = require("./worker");
const RETRY_BACKOFF = [
    ...Array(5).fill(2000),
    ...Array(4).fill(5000),
    10000, // all next tries with delay 10s
];
function makeTunnelClient({ settings, logger: defaultLogger, } = {}) {
    const logger = (0, logger_1.makeLogger)({ logger: defaultLogger, format: { label: 'tunnel-client' }, level: 'all' });
    const req = (0, req_1.makeReq)({
        hooks: [(0, req_logs_1.handleLogs)({ logger })],
    });
    // TCP tunnel is the new way. FRP is the old.
    const useTcpTunnel = !utils.general.getEnvValue('EC_TUNNEL_USE_FRP', 'boolean');
    if (!useTcpTunnel) {
        // TODO propagate this to the user's console
        logger.warn('Using EC Tunnel in FRP mode is deprecated and will be removed in the future. To avoid using it, unset APPLITOOLS_EC_TUNNEL_USE_FRP environment variable, and contact support@applitools.com to further assist in the setup process.');
    }
    const getTunnelService = utils.general.cachify(async (region) => {
        var _a;
        if (settings === null || settings === void 0 ? void 0 : settings.serviceUrl) {
            // should never be reached - this variable only used in the tests
            return {
                url: settings.serviceUrl,
                close: () => Promise.resolve(),
                connectivityTest: () => ({
                    success: true,
                    timeTaken: 0,
                }),
            };
        }
        process.env.APPLITOOLS_EG_TUNNEL_LOG_LEVEL = 'all';
        const { port, cleanupFunction, connectivityTest } = await (0, execution_grid_tunnel_1.startEgTunnelService)({
            region: region !== null && region !== void 0 ? region : settings === null || settings === void 0 ? void 0 : settings.region,
            useTcpTunnel,
            logger,
            tunnelLogFileDirectory: (_a = process.env.APPLITOOLS_EG_TUNNEL_LOG_FILES_DIRECTORY) !== null && _a !== void 0 ? _a : './logs',
        });
        return {
            url: `http://localhost:${port}`,
            async close() {
                await cleanupFunction();
                getTunnelService.clearCache();
            },
            connectivityTest: connectivityTest,
        };
    }, () => 'get-tunnel-service');
    const tunnels = new Map();
    const queues = new Map();
    return { list, create, destroy, replace, close, connectivityTest };
    async function list() {
        var _a, _b;
        const service = await getTunnelService();
        const response = await req('/tunnels', {
            method: 'GET',
            baseUrl: service.url,
        });
        const body = await parseResponseBody(response, logger);
        if (response.status === 200)
            return body.map((tunnelId) => { var _a; return (_a = tunnels.get(tunnelId)) !== null && _a !== void 0 ? _a : { tunnelId }; });
        logger.error(`Failed to list tunnels with status ${response.status}, code ${(_a = body === null || body === void 0 ? void 0 : body.message) !== null && _a !== void 0 ? _a : 'UNKNOWN_ERROR'} and body ${JSON.stringify(body)}`);
        throw new Error(`Failed to list tunnels with code ${(_b = body === null || body === void 0 ? void 0 : body.message) !== null && _b !== void 0 ? _b : (body ? JSON.stringify(body) : 'UNKNOWN_ERROR')}`);
    }
    async function connectivityTest(region, timeout) {
        if (getTunnelService.getCachedValues().length === 0) {
            return {
                success: false,
                error: 'initialization',
                errorMessage: 'Please wait a moment for the tunnel service to be initialized',
            };
        }
        else {
            const service = await getTunnelService(region);
            return await service.connectivityTest(timeout);
        }
    }
    async function create(credentials) {
        logger.mask(credentials.apiKey);
        logger.mask(credentials.eyesServerUrl);
        const service = await getTunnelService(credentials.region);
        const queueKey = `${credentials.apiKey}$${credentials.eyesServerUrl}`;
        let queue = queues.get(queueKey);
        if (!queue) {
            queue = utils.queues.makeCorkableQueue({ makeAbortController: () => new abort_controller_1.AbortController() });
            queues.set(queueKey, queue);
        }
        return queue.run(task);
        async function task(signal, attempt = 1) {
            var _a, _b;
            if (signal.aborted)
                return queue.pause;
            const response = await req('/tunnels', {
                method: 'POST',
                baseUrl: service.url,
                headers: {
                    'x-eyes-api-key': credentials.apiKey,
                    'x-eyes-server-url': credentials.eyesServerUrl,
                    'content-type': 'application/json',
                },
                body: JSON.stringify({ useTcpTunnel }),
                // TODO uncomment when we can throw different abort reasons for task cancelation and timeout abortion
                // signal,
            });
            const body = await parseResponseBody(response, logger);
            if (['CONCURRENCY_LIMIT_REACHED', 'NO_AVAILABLE_TUNNEL_PROXY'].includes(body === null || body === void 0 ? void 0 : body.message)) {
                queue.cork();
                // after query is corked the task might be aborted
                if (signal.aborted)
                    return queue.pause;
                await utils.general.sleep(RETRY_BACKOFF[Math.min(attempt, RETRY_BACKOFF.length - 1)]);
                return task(signal, attempt + 1);
            }
            else {
                queue.uncork();
                if (response.status === 201) {
                    const tunnel = { tunnelId: body, credentials };
                    tunnels.set(tunnel.tunnelId, tunnel);
                    (0, worker_1.resetConsecutiveFailures)();
                    return tunnel;
                }
                logger.error(`Failed to create tunnel with status ${response.status}, code ${(_a = body === null || body === void 0 ? void 0 : body.message) !== null && _a !== void 0 ? _a : 'UNKNOWN_ERROR'} and body ${JSON.stringify(body)}`);
                throw new Error(`Failed to create tunnel with code ${(_b = body === null || body === void 0 ? void 0 : body.message) !== null && _b !== void 0 ? _b : (body ? JSON.stringify(body) : 'UNKNOWN_ERROR')}`);
            }
        }
    }
    async function replace(tunnelId) {
        const tunnel = tunnels.get(tunnelId);
        if (!tunnel) {
            logger.error(`Failed to replace tunnel using unknown tunnel id "${tunnelId}"`);
            throw new Error(`Failed to replace tunnel using unknown tunnel id "${tunnelId}"`);
        }
        await destroy(tunnel.tunnelId);
        return create(tunnel.credentials);
    }
    async function destroy(tunnelId, options) {
        var _a, _b;
        const tunnel = tunnels.get(tunnelId);
        if (!tunnel) {
            logger.error(`Failed to delete tunnel using unknown tunnel id "${tunnelId}"`);
            throw new Error(`Failed to delete tunnel using unknown tunnel id "${tunnelId}"`);
        }
        const service = await getTunnelService(settings === null || settings === void 0 ? void 0 : settings.region);
        const response = await req(`/tunnels/${tunnel.tunnelId}`, {
            method: 'DELETE',
            query: { reason: options === null || options === void 0 ? void 0 : options.reason },
            baseUrl: service.url,
            headers: {
                'x-eyes-api-key': tunnel.credentials.apiKey,
                'x-eyes-server-url': tunnel.credentials.eyesServerUrl,
            },
        });
        const body = await response.json().catch(() => null);
        if (response.status === 200) {
            tunnels.delete(tunnel.tunnelId);
            return;
        }
        logger.error(`Failed to delete tunnel with status ${response.status} and code ${(_a = body === null || body === void 0 ? void 0 : body.message) !== null && _a !== void 0 ? _a : 'UNKNOWN_ERROR'}`);
        throw new Error(`Failed to delete tunnel with code ${(_b = body === null || body === void 0 ? void 0 : body.message) !== null && _b !== void 0 ? _b : (body ? JSON.stringify(body) : 'UNKNOWN_ERROR')}`);
    }
    async function close() {
        try {
            const tunnels = await list();
            logger.log('closing tunnels', tunnels);
            if (tunnels.length) {
                await Promise.all(tunnels.map(tunnel => destroy(tunnel.tunnelId, { reason: 'client-closed' })));
            }
            logger.log('closing tunnel service');
            const service = await getTunnelService(settings === null || settings === void 0 ? void 0 : settings.region);
            await service.close();
            logger.log('tunnel client closed');
        }
        catch (error) {
            logger.error(`Failed to close tunnel client due to an error`, error);
        }
    }
    function parseResponseBody(response, logger) {
        return response
            .text()
            .then(bodyText => {
            try {
                return JSON.parse(bodyText);
            }
            catch (error) {
                logger.error(`Failed to parse response body: ${bodyText}`, error);
                return bodyText;
            }
        })
            .catch(() => 'Request failed');
    }
}
exports.makeTunnelClient = makeTunnelClient;
