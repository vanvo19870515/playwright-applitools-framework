"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeHeartbeat = void 0;
const utils = __importStar(require("@applitools/utils"));
const processId = utils.general.guid();
let isStarted = false;
function makeHeartbeat({ requests, logger: mainLogger }) {
    const logger = mainLogger.extend(mainLogger, { tags: [`heartbeat-base-${utils.general.shortid()}`] });
    return {
        processId,
        async startPeriodicHeartbeatMessaging(settings) {
            if (!isStarted) {
                isStarted = true;
                // send the first heartbeat right away
                await requests.sendHeartbeat({ settings, logger });
                // using setInterval here and not setTimeout, since the requirement is to fire a request every `interval` ms.
                // If we used setTimeout, the time would be calculated from the point of when the request ended, which would make the total interval time more than `interval` (normally 10 seconds).
                const intervalId = setInterval(async () => {
                    try {
                        await requests.sendHeartbeat({ settings, logger });
                    }
                    catch (error) {
                        if (error.message === 'This process is expired. All its sessions were abandoned') {
                            clearInterval(intervalId);
                        }
                    }
                }, settings.interval);
                intervalId.unref();
            }
        },
    };
}
exports.makeHeartbeat = makeHeartbeat;
