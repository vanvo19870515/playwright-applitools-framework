"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.performEcHealthCheck = void 0;
const req_1 = require("@applitools/req");
const req_logs_1 = require("./req-logs");
async function performEcHealthCheck(options) {
    var _a, _b;
    const { ecServerUrl, connectivityTest, logger } = options;
    const req = (0, req_1.makeReq)({
        baseUrl: ecServerUrl,
        hooks: [(0, req_logs_1.handleLogs)({ logger })],
    });
    try {
        const statusResult = await req('/status', { requestTimeout: 5000 });
        if (statusResult.status !== 200) {
            const body = await statusResult.text();
            return {
                verified_at: Date.now(),
                status: 'error',
                error_code: 'ERR_UNEXPECTED_STATUS',
                error: {
                    message: `Unexpected status ${statusResult.status} received with body ${body}`,
                    reason: 'unexpected-status',
                    status: statusResult.status,
                    body,
                    url: statusResult.url,
                },
            };
        }
    }
    catch (error) {
        return {
            verified_at: Date.now(),
            status: 'error',
            error_code: 'ERR_UNREACHABLE',
            error: {
                message: (_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : String(error),
                reason: 'exception during health-check',
            },
        };
    }
    const connectivityTestResult = await connectivityTest();
    if (connectivityTestResult.success) {
        return {
            verified_at: Date.now(),
            status: 'success',
        };
    }
    else {
        return {
            verified_at: Date.now(),
            status: 'error',
            error_code: 'ERR_CONNECTIVITY_TEST_FAILED',
            error: {
                message: (_b = connectivityTestResult.error) !== null && _b !== void 0 ? _b : 'Unknown error',
                reason: 'connectivity-test-failed',
            },
            // TODO what should be done with connectivityTestResult.timeTaken ?
        };
    }
}
exports.performEcHealthCheck = performEcHealthCheck;
