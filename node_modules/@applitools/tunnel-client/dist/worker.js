"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTunnelClientWorker = exports.resetConsecutiveFailures = void 0;
const logger_1 = require("@applitools/logger");
const socket_1 = require("@applitools/socket");
const client_1 = require("./client");
const generator_1 = require("./generator");
const fetch_resource_1 = require("./fetch-resource");
const metrics_1 = require("./metrics");
const path = __importStar(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const ec_healthcheck_1 = require("./ec-healthcheck");
const LOG_DIRNAME = (_a = process.env.APPLITOOLS_LOG_DIR) !== null && _a !== void 0 ? _a : path.resolve(process.cwd(), 'logs');
const MAX_BACKOFF = 2 * 60000; // 2 minutes
let consecutiveFailures = 0;
function resetConsecutiveFailures() {
    consecutiveFailures = 0;
}
exports.resetConsecutiveFailures = resetConsecutiveFailures;
function makeTunnelClientWorker({ settings, logger: defaultLogger, }) {
    const logger = (0, logger_1.makeLogger)({
        logger: defaultLogger,
        handler: { type: 'rolling file', name: 'tunnel-client', dirname: LOG_DIRNAME },
        format: { label: 'tunnel-client', colors: false },
        level: 'all',
    });
    logger.info('Tunnel client worker started');
    filterProcessWarnings(logger);
    if (consecutiveFailures === 0) {
        logger.console.log(chalk_1.default.bold(`execution-grid-tunnel logs are written to ${path.resolve(LOG_DIRNAME)}`));
    }
    process.on('unhandledRejection', error => {
        logger.console.error(`Unhandled rejection terminating the process with consecutive failures: ${consecutiveFailures}`, error);
        restartTunnelClientWorker({ settings, logger });
    });
    process.on('uncaughtException', error => {
        logger.console.error(`Uncaught error terminating the process with consecutive failures: ${consecutiveFailures}`, error);
        restartTunnelClientWorker({ settings, logger });
    });
    return runSession({ settings, logger });
}
exports.makeTunnelClientWorker = makeTunnelClientWorker;
async function runSession({ settings, logger }) {
    logger.info('Session: Started');
    const client = (0, client_1.makeTunnelClient)({ settings, logger });
    const generator = (0, generator_1.makeGenerator)({ settings: { ...settings, envInfo: (0, metrics_1.extractEnvInfo)() }, logger });
    const socket = (0, socket_1.makeSocket)(generator, { transport: 'generator', logger });
    async function listAndMetrics() {
        socket.emit('TunnelClient.list', await client.list());
        socket.emit('TunnelClient.metrics', (0, metrics_1.extractCurrentUsage)());
    }
    listAndMetrics();
    const listAndMetricsInterval = setInterval(listAndMetrics, 20000);
    const abortHealthCheckInterval = startEcHealthCheck({ settings, logger, client, socket });
    socket.command('TunnelClient.create', client.create);
    socket.command('TunnelClient.replace', client.replace);
    socket.command('TunnelClient.destroy', client.destroy);
    socket.command('TunnelClient.fetch', fetch_resource_1.fetchResource);
    return new Promise((resolve, reject) => {
        socket.on('TunnelClient.close', async (reason) => {
            logger.fatal('Worker is going to be closed due to a reason', reason);
            clearInterval(listAndMetricsInterval);
            abortHealthCheckInterval();
            await client.close();
            resolve(reason);
        });
        socket.on('error', async (reason) => {
            logger.fatal('Session: Encountered fatal error. Cleaning up and signaling exit...', reason);
            clearInterval(listAndMetricsInterval);
            abortHealthCheckInterval();
            await client.close();
            reject(reason);
        });
    });
}
function restartTunnelClientWorker({ settings, logger }) {
    consecutiveFailures++;
    const backoffTime = Math.min(MAX_BACKOFF, 1000 * Math.pow(2, consecutiveFailures));
    setTimeout(() => {
        makeTunnelClientWorker({ settings, logger });
    }, backoffTime);
}
function startEcHealthCheck({ settings, logger, client, socket, }) {
    var _a, _b;
    const ecHealthCheckInterval = (_a = settings.ecHealthCheckInterval) !== null && _a !== void 0 ? _a : 60000;
    const ecServerUrl = (_b = process.env.APPLITOOLS_EG_TUNNEL_MANAGER_URL) !== null && _b !== void 0 ? _b : (settings.region === 'australia-southeast'
        ? 'https://exec-au.applitools.com'
        : settings.region === 'singapore'
            ? 'https://exec-sgp.applitools.com'
            : 'https://exec-wus.applitools.com');
    logger.log('EC health check interval is set to', settings.ecHealthCheckInterval);
    logger.log('EC server URL is set to', ecServerUrl);
    if (ecHealthCheckInterval) {
        doHealthCheckAndEmit();
        const interval = setInterval(doHealthCheckAndEmit, ecHealthCheckInterval);
        if (typeof interval != 'number')
            interval.unref();
        return () => clearInterval(interval);
    }
    else {
        return () => { };
    }
    async function doHealthCheckAndEmit(attempt = 0) {
        var _a;
        const ecHealthCheckStatus = await (0, ec_healthcheck_1.performEcHealthCheck)({
            ecServerUrl,
            logger,
            connectivityTest() {
                return client.connectivityTest(settings.region, ecHealthCheckInterval * 0.5);
            },
        });
        if (((_a = ecHealthCheckStatus === null || ecHealthCheckStatus === void 0 ? void 0 : ecHealthCheckStatus.error) === null || _a === void 0 ? void 0 : _a.message) !== 'initialization')
            socket.emit('TunnelClient.EcHealthCheck', ecHealthCheckStatus);
        else
            setTimeout(doHealthCheckAndEmit.bind(null, attempt + 1), 100 * 2 ** attempt).unref();
    }
}
function filterProcessWarnings(logger) {
    process.removeAllListeners('warning');
    const warningsIgnoreList = ['NODE_TLS_REJECT_UNAUTHORIZED', 'ExperimentalWarning'];
    process.on('warning', warning => {
        for (const warningName of warningsIgnoreList) {
            if (warning.name.includes(warningName) || warning.message.includes(warningName)) {
                logger === null || logger === void 0 ? void 0 : logger.warn(`Ignoring warning: ${warningName} - ${warning.message}`);
                return;
            }
        }
        // eslint-disable-next-line no-console
        console.warn(warning);
    });
}
