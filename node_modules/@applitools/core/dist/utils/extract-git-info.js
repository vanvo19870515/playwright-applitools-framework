"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isISODate = exports.extractBranchingTimestamp = exports.extractBuildIdFromCI = exports.extractGitRepo = exports.extractGitBranch = exports.extractLatestCommitInfo = exports.cacheKey = void 0;
const utils = __importStar(require("@applitools/utils"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const logger_1 = require("@applitools/logger");
exports.cacheKey = 'default';
exports.extractLatestCommitInfo = utils.general.cachify(async function ({ execOptions, logger = (0, logger_1.makeLogger)(), }) {
    let result;
    try {
        const githubPullRequestLastCommitSha = await extractGithubPullRequestLastCommitSha();
        result = await executeWithLog(`git log ${githubPullRequestLastCommitSha !== null && githubPullRequestLastCommitSha !== void 0 ? githubPullRequestLastCommitSha : ''} -1 --format="%aI %H"`, {
            execOptions,
            logger,
        });
        if (result.stderr) {
            logger.log(`Error during extracting commit information from git`, result.stderr);
        }
        else {
            const [timestamp, sha] = result.stdout.trim().split(' ');
            if (isISODate(timestamp)) {
                return { sha, timestamp };
            }
            else {
                logger.log(`latestCommitInfo.timestamp is an invalid ISO date string: ${timestamp}`);
            }
        }
    }
    catch (err) {
        logger.log(`Error during parsing commit hash from git`, err, result === null || result === void 0 ? void 0 : result.stdout);
    }
    async function extractGithubPullRequestLastCommitSha() {
        var _a, _b, _c;
        if (((_a = process.env.GITHUB_EVENT_NAME) === null || _a === void 0 ? void 0 : _a.startsWith('pull_request')) && process.env.GITHUB_EVENT_PATH) {
            await executeWithLog(`git fetch origin --depth=2`, { execOptions, logger });
            const event = await fs_1.default.promises.readFile(process.env.GITHUB_EVENT_PATH, 'utf-8').then(JSON.parse);
            return (_c = (_b = event === null || event === void 0 ? void 0 : event.pull_request) === null || _b === void 0 ? void 0 : _b.head) === null || _c === void 0 ? void 0 : _c.sha;
        }
    }
}, () => exports.cacheKey);
exports.extractGitBranch = utils.general.cachify(async function ({ execOptions, logger = (0, logger_1.makeLogger)() }) {
    if (process.env.GITHUB_HEAD_REF) {
        return process.env.GITHUB_HEAD_REF;
    }
    if (process.env.GITHUB_REF) {
        return process.env.GITHUB_REF.split('/').splice(2).join('/'); // refs/heads/<branch_name>
    }
    const result = await executeWithLog('git branch --show-current', { execOptions, logger });
    if (result.stderr) {
        logger.log(`Error during extracting current branch from git`, result.stderr);
    }
    else {
        const branch = result.stdout.trim();
        logger.log(`Extracted current git branch: "${branch}"`);
        return branch;
    }
}, () => exports.cacheKey);
exports.extractGitRepo = utils.general.cachify(async function ({ execOptions, logger = (0, logger_1.makeLogger)() }) {
    const remotes = await extractRemotes();
    logger.log(`Extracted remotes from git: ${remotes}`);
    const remote = remotes.includes('origin') ? 'origin' : remotes[0];
    const result = await executeWithLog(`git remote get-url ${remote}`, { execOptions, logger });
    if (result.stderr) {
        logger.log(`Error during extracting remote url from git`, result.stderr);
        return {};
    }
    else {
        const remoteUrl = result.stdout.trim();
        logger.log(`Extracted url for git remote ${remote}: ${remoteUrl}`);
        return extractRepoFromRemoteUrl(remoteUrl);
    }
    async function extractRemotes() {
        const result = await executeWithLog('git remote show', { execOptions, logger });
        if (result.stderr) {
            logger.log(`Error during extracting remotes from git`, result.stderr);
            return [];
        }
        else {
            return result.stdout.trim().split(/\s+/);
        }
    }
    function extractRepoFromRemoteUrl(remoteUrl) {
        try {
            const url = new URL(remoteUrl);
            return { name: path_1.default.basename(url.pathname, '.git'), owner: path_1.default.dirname(url.pathname).replace(/^\//, '') };
        }
        catch (err) {
            return { name: path_1.default.basename(remoteUrl, '.git'), owner: path_1.default.dirname(remoteUrl).replace(/^[^:]+:/, '') };
        }
    }
}, () => exports.cacheKey);
async function extractBuildIdFromCI() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    return ((_k = (_j = (_h = (_g = (_f = (_e = (_d = (_c = (_b = (_a = process.env.GITHUB_RUN_ID) !== null && _a !== void 0 ? _a : process.env.CI_JOB_ID) !== null && _b !== void 0 ? _b : process.env.CIRCLE_BUILD_NUM) !== null && _c !== void 0 ? _c : process.env.BUILD_BUILDID) !== null && _d !== void 0 ? _d : process.env.BITBUCKET_BUILD_NUMBER) !== null && _e !== void 0 ? _e : process.env.CODEBUILD_BUILD_ID) !== null && _f !== void 0 ? _f : process.env.BUILD_ID) !== null && _g !== void 0 ? _g : process.env.BUILD_NUMBER) !== null && _h !== void 0 ? _h : process.env.TRAVIS_BUILD_ID) !== null && _j !== void 0 ? _j : process.env.BUILDKITE_BUILD_ID) !== null && _k !== void 0 ? _k : process.env.BAMBOO // TODO: Bamboo
    );
}
exports.extractBuildIdFromCI = extractBuildIdFromCI;
exports.extractBranchingTimestamp = utils.general.cachify(async function ({ branchName, parentBranchName, execOptions, logger = (0, logger_1.makeLogger)(), }) {
    var _a;
    logger = logger.extend({ tags: [`extract-branching-timestamp-${utils.general.shortid()}`] });
    const command = `HASH=$(git merge-base ${branchName} ${parentBranchName}) && git show -q --format=%aI $HASH`;
    let result = await executeWithLog(command, { execOptions, logger });
    // both parent and current branches could be missing, that's why we have to iterate the missing branches check check twice
    for (let i = 0; i < 2; i++) {
        if (result.stderr) {
            const [, missingBranch] = (_a = result.stderr.match(/Not a valid object name ([^\s]+)/)) !== null && _a !== void 0 ? _a : [];
            if (missingBranch) {
                result = await executeWithLog(`git fetch origin ${missingBranch}:${missingBranch} && ${command}`, {
                    execOptions,
                    logger,
                });
            }
        }
    }
    if (!result.stdout) {
        result = await executeWithLog(`git fetch origin --unshallow && ${command}`, { execOptions, logger });
    }
    const timestamp = result.stdout.replace(/\s/g, '');
    if (isISODate(timestamp)) {
        logger.log('git branching timestamp successfully extracted', timestamp);
        return timestamp;
    }
    else {
        logger.log(`Error during extracting merge timestamp: git branching timestamp is an invalid ISO date string: ${timestamp}. stderr: ${result.stderr}, stdout: ${result.stdout}`);
    }
}, () => exports.cacheKey);
async function executeWithLog(command, { execOptions, logger = (0, logger_1.makeLogger)() } = {
    execOptions: {},
    logger: (0, logger_1.makeLogger)(),
}) {
    logger.log(`executing command: ${command}`);
    const result = await utils.process.execute(command, execOptions);
    if (result.stderr && result.code) {
        logger.log(`exit code: ${result.code}, stderr: ${result.stderr}`);
    }
    return result;
}
function isISODate(str) {
    return /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\+\d{2}:\d{2})?/.test(str);
}
exports.isISODate = isISODate;
