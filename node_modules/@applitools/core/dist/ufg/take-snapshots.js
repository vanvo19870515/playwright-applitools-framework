"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTakeSnapshots = void 0;
const driver_1 = require("@applitools/driver");
const take_dom_snapshots_1 = require("./utils/take-dom-snapshots");
const to_safe_check_settings_1 = require("./utils/to-safe-check-settings");
const to_generated_selectors_1 = require("./utils/to-generated-selectors");
const abort_error_1 = require("../errors/abort-error");
const filterStaleElements_1 = require("./utils/filterStaleElements");
function makeTakeSnapshots({ core, spec, signal, logger: mainLogger }) {
    return async function takeSnapshots({ driver, settings = {}, account, logger = mainLogger, }) {
        var _a, _b;
        logger = logger.extend(mainLogger);
        logger.log('Command "takeSnapshots" is called with settings', settings);
        if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
            logger.warn('Command "takeSnapshots" was called after test was already aborted');
            throw new abort_error_1.AbortError('Command "takeSnapshots" was called after test was already aborted');
        }
        const uniqueEnvironments = settings.environments;
        if (!driver)
            throw new Error('Cannot create check snapshot without a driver');
        const environment = await driver.getEnvironment();
        const currentContext = driver.currentContext;
        await currentContext.setScrollingElement((_a = settings.scrollRootElement) !== null && _a !== void 0 ? _a : null);
        const { elementReferences, getSafeCheckSettings } = (0, to_safe_check_settings_1.toSafeCheckSettings)({ settings });
        const { elementReferencesToMark, getGeneratedSelectors } = (0, to_generated_selectors_1.toGeneratedSelectors)({
            elementReferences,
            logger,
            // dead code - `transformElementReference` was used for NMG but it's not longer used anywhere
            transformElementReference: elementReference => { var _a; return ((0, driver_1.isSelector)(elementReference) && ((_a = spec === null || spec === void 0 ? void 0 : spec.toSimpleCommonSelector) === null || _a === void 0 ? void 0 : _a.call(spec, elementReference))) || undefined; },
        });
        let snapshots;
        if (environment.isWeb) {
            const ufgClient = await core.getUFGClient({
                settings: {
                    ...account.ufgServer,
                    eyesServerUrl: account.eyesServer.eyesServerUrl,
                    apiKey: account.eyesServer.apiKey,
                },
                logger,
            });
            const takeSnapshotsSettings = {
                driver,
                settings: {
                    waitBeforeCapture: settings.waitBeforeCapture,
                    disableBrowserFetching: settings.disableBrowserFetching,
                    layoutBreakpoints: settings.layoutBreakpoints,
                    environments: uniqueEnvironments,
                    skipResources: ufgClient.getCachedResourceUrls(),
                    lazyLoad: settings.lazyLoad,
                    elementReferences: elementReferencesToMark,
                },
                provides: {
                    getChromeEmulationDevices: ufgClient.getChromeEmulationDevices,
                    getIOSDevices: ufgClient.getIOSDevices,
                },
                logger,
            };
            try {
                snapshots = await (0, take_dom_snapshots_1.takeDomSnapshots)(takeSnapshotsSettings);
            }
            catch (err) {
                if ((_b = err === null || err === void 0 ? void 0 : err.message) === null || _b === void 0 ? void 0 : _b.includes('stale element')) {
                    snapshots = await (0, take_dom_snapshots_1.takeDomSnapshots)({
                        ...takeSnapshotsSettings,
                        settings: await (0, filterStaleElements_1.removeStaleElementsFromDomSnapshotsSettings)({
                            settings: takeSnapshotsSettings.settings,
                            context: currentContext,
                            targetElement: elementReferences.target,
                        }),
                    });
                }
                else {
                    throw err;
                }
            }
        }
        else {
            // dead code - used for NMG
            const nmlClient = await core.getNMLClient({
                driver,
                settings: { ...account.eyesServer, supportedEnvironmentsUrl: account.supportedEnvironmentsUrl },
                logger,
            });
            snapshots = await nmlClient.takeSnapshots({
                settings: {
                    ...account.eyesServer,
                    waitBeforeCapture: settings.waitBeforeCapture,
                    environments: uniqueEnvironments,
                },
                logger,
            });
        }
        await currentContext.focus();
        const url = await driver.getUrl();
        const title = await driver.getTitle();
        const userAgent = environment.isWeb ? await driver.getUserAgentLegacy() : undefined;
        return snapshots.map((snapshot, index) => ({
            target: snapshot,
            settings: getSafeCheckSettings({
                selectors: getGeneratedSelectors(snapshot.generatedSelectors),
            }),
            environment: uniqueEnvironments[index],
            account,
            url,
            title,
            userAgent,
        }));
    };
}
exports.makeTakeSnapshots = makeTakeSnapshots;
