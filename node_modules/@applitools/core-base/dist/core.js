"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCore = void 0;
const logger_1 = require("@applitools/logger");
const requests_1 = require("./server/requests");
const requests_offline_1 = require("./server/requests-offline");
const open_eyes_1 = require("./open-eyes");
const open_functional_session_1 = require("./open-functional-session");
const locate_1 = require("./locate");
const locate_text_1 = require("./locate-text");
const extract_text_1 = require("./extract-text");
const close_batch_1 = require("./close-batch");
const delete_test_1 = require("./delete-test");
const get_account_info_1 = require("./get-account-info");
const heartbeat_1 = require("./heartbeat");
const open_check_and_close_1 = require("./open-check-and-close");
function makeCore({ agentId = 'core-base', concurrency, maskLog, logger: defaultLogger, offlineLocationPath, }) {
    const logger = (0, logger_1.makeLogger)({ logger: defaultLogger, format: { label: 'core-base' }, maskLog });
    logger.log(`Core is initialized for agent ${agentId}`);
    const requests = offlineLocationPath
        ? (0, requests_offline_1.makeCoreRequestsOfflineWithCache)({ folderPath: offlineLocationPath, logger })
        : (0, requests_1.makeCoreRequestsWithCache)({ logger });
    const heartbeat = (0, heartbeat_1.makeHeartbeat)({ requests, logger });
    return {
        get concurrency() {
            return concurrency;
        },
        openEyes: (0, open_eyes_1.makeOpenEyes)({ requests, agentId, concurrency, heartbeat, logger }),
        openFunctionalSession: (0, open_functional_session_1.makeOpenFunctionalSession)({ requests, agentId, concurrency, logger }),
        openCheckAndClose: (0, open_check_and_close_1.makeOpenCheckAndClose)({ requests, agentId, logger }),
        locate: (0, locate_1.makeLocate)({ requests, agentId, logger }),
        locateText: (0, locate_text_1.makeLocateText)({ requests, agentId, logger }),
        extractText: (0, extract_text_1.makeExtractText)({ requests, agentId, logger }),
        closeBatch: (0, close_batch_1.makeCloseBatch)({ requests, agentId, logger }),
        deleteTest: (0, delete_test_1.makeDeleteTest)({ requests, agentId, logger }),
        getAccountInfo: (0, get_account_info_1.makeGetAccountInfo)({ requests, agentId, logger }),
        logEvent: (...args) => requests.logEvent(...args).catch(() => void 0),
        updateIfScm: requests.updateIfScm,
        openCheckAndCloseEyes(options) {
            var _a, _b;
            return requests.openCheckAndCloseEyes({ ...options, logger: (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.extend(logger)) !== null && _b !== void 0 ? _b : logger });
        },
    };
}
exports.makeCore = makeCore;
